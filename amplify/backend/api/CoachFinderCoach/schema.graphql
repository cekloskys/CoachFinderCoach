type Mutation {
  createPaymentIntent(amount: Int!): PaymentIntent! @function(name: "CreatePaymentIntent-${env}")
}

type PaymentIntent {
  clientSecret: String!
}

type PositionCoach @model @auth(rules: [{allow: public}]) {
  id: ID!
  Position: Position @hasOne
  coachID: ID! @index(name: "byCoach")
}

type Position @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type AgeCoach @model @auth(rules: [{allow: public}]) {
  id: ID!
  Age: Age @hasOne
  coachID: ID! @index(name: "byCoach")
}

type SpecialityCoach @model @auth(rules: [{allow: public}]) {
  id: ID!
  Speciality: Speciality @hasOne
  coachID: ID! @index(name: "byCoach")
}

type AccreditationCoach @model @auth(rules: [{allow: public}]) {
  id: ID!
  Accreditation: Accreditation @hasOne
  coachID: ID! @index(name: "byCoach")
}

type Accreditation @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type Sport @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  Coaches: [Coach] @hasMany(indexName: "bySport", fields: ["id"])
}

type Coach @model @auth(rules: [{allow: public}]) {
  id: ID!
  highlights: String
  sessionPlan: String
  background: String
  yearsCoaching: Int
  yearsPlaying: Int
  college: String
  shortDesc: String
  image: String
  startPrice: Float
  fullName: String
  email: String
  streetAddress: String
  city: String
  state: String
  zip: String
  phoneNbr: String
  dob: String
  sub: String
  sportID: ID! @index(name: "bySport")
  Ratings: [Rating] @hasMany(indexName: "byCoach", fields: ["id"])
  Availabilities: [Availability] @hasMany(indexName: "byCoach", fields: ["id"])
  Bookings: [Booking] @hasMany(indexName: "byCoach", fields: ["id"])
  AccreditationCoaches: [AccreditationCoach] @hasMany(indexName: "byCoach", fields: ["id"])
  SpecialityCoaches: [SpecialityCoach] @hasMany(indexName: "byCoach", fields: ["id"])
  AgeCoaches: [AgeCoach] @hasMany(indexName: "byCoach", fields: ["id"])
  PositionCoaches: [PositionCoach] @hasMany(indexName: "byCoach", fields: ["id"])
}

type Profile @model @auth(rules: [{allow: public}]) {
  id: ID!
  fullName: String
  email: String
  streetAddress: String
  city: String
  state: String
  zip: String
  phoneNbr: String
  sub: String
  Bookings: [Booking] @hasMany(indexName: "byProfile", fields: ["id"])
}

type Age @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type Speciality @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
}

type Package @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  price: Float
  shortDesc: String
  longDesc: String
  length: Int
  coachID: String
  Bookings: [Booking] @hasMany(indexName: "byPackage", fields: ["id"])
}

enum BookingStatus {
  PENDING
  IN_PROGRESS
  DECLINED
  COMPLETED
  CANCELLED
  PAID
}

type Booking @model @auth(rules: [{allow: public}]) {
  id: ID!
  athleteName: String
  startDate: String
  startTime: String
  status: BookingStatus
  atheleteAge: String
  coachID: ID! @index(name: "byCoach")
  profileID: ID! @index(name: "byProfile")
  packageID: ID! @index(name: "byPackage")
}

type Availability @model @auth(rules: [{allow: public}]) {
  id: ID!
  day: String
  time: String
  coachID: ID! @index(name: "byCoach")
}

type Rating @model @auth(rules: [{allow: public}]) {
  id: ID!
  rating: Float
  review: String
  coachID: ID! @index(name: "byCoach")
  Booking: Booking @hasOne
}
